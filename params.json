{"name":"qDecoder","tagline":"qDecoder is a simple and powerful CGI library for C/C++ programming language.","body":"## What's qDecoder?\r\n\r\nqDecoder is a CGI library for C/C++ programming language which has been developed since 1996.\r\n\r\n## Features\r\n\r\n  * Supports parsing a request encoded by GET/POST method\r\n  * Supports parsing multipart/form-data encoding. (in-memory and direct disk)\r\n  * Supports COOKIE handling.\r\n  * Supports Session management.\r\n  * Supports FastCGI\r\n\r\n===== How easy making CGI applications in C/C++ =====\r\n\r\n```\r\n  [HTML sample]\r\n  <form action=\"your_program.cgi\">\r\n    <input type=\"text\" name=\"color\">\r\n    <input type=\"submit\">\r\n  </form>\r\n\r\n  [Your Code]\r\n  qentry_t *req = qcgireq_parse(NULL, 0);\r\n\r\n  qcgires_setcontenttype(req, \"text/plain\");\r\n  const char *color = req->getstr(req, \"color\", false);\r\n  if (color != NULL) {\r\n    printf(\"color = %s\\n\", color);\r\n  }\r\n\r\n  req->free(req);\r\n```\r\n\r\nThe order of parsing sequence is (1)COOKIE (2)POST (3)GET. Thus if there is a same query name existing in different methods, COOKIE values will be stored first than POST, GET values will be added at the very last into a qentry linked-list.\r\n\r\nBelow is an example to parse only two given methods. Please note that when multiple methods are specified, it'll be parsed in the order of COOKIE, POST and GET.\r\n\r\n```\r\n  qentry_t *req = qcgireq_parse(req, Q_CGI_COOKIE | Q_CGI_POST);\r\n```\r\n\r\nTo change the order of parsing sequence, you can call qcgireq_parse() multiple times in the order that you want as below.\r\n\r\n```\r\n  qentry_t *req;\r\n  req = qcgireq_parse(req, Q_CGI_POST);\r\n  req = qcgireq_parse(req, Q_CGI_GET);\r\n  req = qcgireq_parse(req, Q_CGI_COOKIE);\r\n```\r\n\r\nIn terms of multipart/form-data encoding(used for file uploading), qDecoder can handle that in two different ways internally.\r\n\r\n* default mode : Uploading file will be processed only in memory. (see examples/upload.c) \r\n* file mode : Uploading file will be stored directly into disk. (see examples/uploadfile.c)\r\n\r\nYou can switch to file mode by calling qCgiRequestSetOption(). \r\n\r\n```\r\n  Q_ENTRY *req = qcgireq_setoption(NULL, true, \"/tmp\", 86400);\r\n  req = qcgireq_parse(req, 0);\r\n  // ...your codes here...\r\n  req->free(req);\r\n```\r\n\r\nBasically, when file is uploaded qDecoder store it's meta information like below. \r\n\r\n  * (VARIABLE_NAME) - In the default mode, this is binary data. In the file mode this value is same as \"(VARIABLE_NAME).savepath\". \r\n  * (VARIABLE_NAME).filename - File name itself, path information will be removed. \r\n  * (VARIABLE_NAME).length - File size, the number of bytes. \r\n  * (VARIABLE_NAME).contenttype - Mime type like 'text/plain'. \r\n  * (VARIABLE_NAME).savepath - Only appended only in file mode. The file path where the uploaded file is saved.\r\n\r\n```\r\n  [default mode example]\r\n  binary = (...binary data...)\r\n  binary.filename = hello.xls\r\n  binary.length = 3292\r\n  binary.contenttype = application/vnd.ms-excel\r\n\r\n  [file mode example]\r\n  binary = tmp/q_wcktIq\r\n  binary.length = 60014\r\n  binary.filename = hello.xls\r\n  binary.contenttype = application/vnd.ms-excel\r\n  binary.savepath = tmp/q_wcktIq\r\n```\r\n\r\nPlease refer the examples included in the source package for more detailed samples.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}